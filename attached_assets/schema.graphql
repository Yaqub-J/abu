type User @model 
@auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admins"] }
]) {
  id: ID!
  email: String!
  username: String!
  userRole: UserRole!
  status: UserStatus!
  userProfile: UserProfile @hasOne
  alumniProfile: AlumniProfile @hasOne
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum UserRole {
  ADMIN
  ALUMNI
  CONTENT_MODERATOR
  EVENT_MANAGER
}

enum UserStatus {
  ACTIVE
  PENDING
  SUSPENDED
  INACTIVE
}

type UserProfile @model
@auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admins"] }
]) {
  id: ID!
  userId: ID!
  firstName: String!
  lastName: String!
  middleName: String
  bio: String
  avatar: String
  phoneNumber: String
  address: String
  city: String
  state: String
  country: String
  privacySettings: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type AlumniProfile @model
@auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admins"] },
  { allow: private, operations: [read] }
]) {
  id: ID!
  userId: ID!
  graduationYear: Int!
  department: String!
  degree: String!
  employmentHistory: [Employment] @hasMany
  educationDetails: [Education] @hasMany
  connections: [Connection] @hasMany
  projects: [ProjectParticipant] @hasMany
  groups: [GroupMember] @hasMany
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Employment @model {
  id: ID!
  alumniProfileId: ID!
  company: String!
  title: String!
  startDate: AWSDate!
  endDate: AWSDate
  description: String
  isCurrent: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Education @model {
  id: ID!
  alumniProfileId: ID!
  institution: String!
  degree: String!
  field: String!
  startDate: AWSDate!
  endDate: AWSDate
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Connection @model {
  id: ID!
  requesterID: ID!
  requesteeID: ID!
  status: ConnectionStatus!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

# Events & Content Service

type Event @model
@auth(rules: [
  { allow: groups, groups: ["Admins", "EVENT_MANAGER"] },
  { allow: private, operations: [read] }
]) {
  id: ID!
  title: String!
  description: String!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  location: String
  virtualLink: String
  status: EventStatus!
  bannerImage: String
  attendees: [EventAttendee] @hasMany
  createdBy: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

type EventAttendee @model
@auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admins", "EVENT_MANAGER"] }
]) {
  id: ID!
  eventId: ID!
  userId: ID!
  status: AttendeeStatus!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum AttendeeStatus {
  REGISTERED
  CHECKED_IN
  NO_SHOW
  CANCELLED
}

type Post @model
@auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admins", "CONTENT_MODERATOR"] },
  { allow: private, operations: [read] }
]) {
  id: ID!
  title: String!
  content: String!
  images: [String]
  authorId: ID!
  status: PostStatus!
  comments: [Comment] @hasMany
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum PostStatus {
  PUBLISHED
  DRAFT
  PENDING_APPROVAL
  REJECTED
}

type Comment @model
@auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admins", "CONTENT_MODERATOR"] },
  { allow: private, operations: [read] }
]) {
  id: ID!
  postId: ID!
  content: String!
  authorId: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Notification @model
@auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admins"] }
]) {
  id: ID!
  userId: ID!
  title: String!
  message: String!
  type: NotificationType!
  referenceId: ID
  isRead: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum NotificationType {
  EVENT
  CONNECTION
  POST
  DONATION
  SYSTEM
  GROUP
  PROJECT
}

# Donation & Payment Service

type Donation @model
@auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admins"] }
]) {
  id: ID!
  userId: ID
  amount: Float!
  currency: String!
  paymentMethod: String!
  status: DonationStatus!
  isAnonymous: Boolean!
  message: String
  receiptUrl: String
  transactionId: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

# Community Service (Groups & Projects)

type Group @model
@auth(rules: [
  { allow: groups, groups: ["Admins"] },
  { allow: private, operations: [read] },
  { allow: owner, ownerField: "createdBy" }
]) {
  id: ID!
  name: String!
  description: String!
  type: GroupType!
  location: String
  isGeographical: Boolean!
  members: [GroupMember] @hasMany
  projects: [Project] @hasMany
  createdBy: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum GroupType {
  STATE
  CITY
  LGA
  ALUMNI_CREATED
  DEPARTMENT
  INTEREST
}

type GroupMember @model
@auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admins"] }
]) {
  id: ID!
  groupId: ID!
  userId: ID!
  role: GroupMemberRole!
  status: GroupMemberStatus!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum GroupMemberRole {
  MEMBER
  ADMIN
  MODERATOR
}

enum GroupMemberStatus {
  ACTIVE
  PENDING
  REJECTED
  BANNED
}

type Project @model
@auth(rules: [
  { allow: groups, groups: ["Admins"] },
  { allow: private, operations: [read] },
  { allow: owner, ownerField: "createdBy" }
]) {
  id: ID!
  title: String!
  description: String!
  status: ProjectStatus!
  startDate: AWSDate
  endDate: AWSDate
  groupId: ID
  participants: [ProjectParticipant] @hasMany
  createdBy: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ProjectStatus {
  PLANNING
  ONGOING
  COMPLETED
  CANCELLED
  ON_HOLD
}

type ProjectParticipant @model
@auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admins"] }
]) {
  id: ID!
  projectId: ID!
  userId: ID!
  role: ProjectRole!
  joinDate: AWSDateTime!
  leaveDate: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ProjectRole {
  LEAD
  MEMBER
  ADVISOR
  CONTRIBUTOR
}

# Admin Module Extensions

type SystemSetting @model
@auth(rules: [
  { allow: groups, groups: ["Admins"] }
]) {
  id: ID!
  key: String!
  value: String!
  description: String
  updatedBy: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type AdminAuditLog @model
@auth(rules: [
  { allow: groups, groups: ["Admins"] }
]) {
  id: ID!
  adminId: ID!
  action: String!
  details: AWSJSON
  ipAddress: String
  createdAt: AWSDateTime!
}

# Queries and Mutations

type Query {
  searchAlumni(
    filter: AlumniSearchFilter
    limit: Int
    nextToken: String
  ): AlumniSearchConnection @function(name: "searchAlumniFunction")
  
  getDashboardStats: DashboardStats @function(name: "getDashboardStatsFunction")
  
  getPaymentIntent(
    amount: Float!
    currency: String!
  ): PaymentIntentResponse @function(name: "getPaymentIntentFunction")
}

type Mutation {
  processPayment(
    paymentIntentId: String!
    donationId: String!
  ): PaymentResult @function(name: "processPaymentFunction")
  
  sendBulkNotifications(
    title: String!
    message: String!
    userIds: [ID]
    userGroups: [String]
  ): BulkNotificationResult @function(name: "sendBulkNotificationsFunction")
}

# Custom Types for Search and Dashboard

type AlumniSearchConnection {
  items: [AlumniSearchResult]
  nextToken: String
}

type AlumniSearchResult {
  id: ID!
  userId: ID!
  firstName: String!
  lastName: String!
  graduationYear: Int
  department: String
  profileImage: String
}

input AlumniSearchFilter {
  name: String
  graduationYear: Int
  department: String
  location: String
}

type DashboardStats {
  totalUsers: Int!
  activeAlumni: Int!
  totalDonations: Float!
  recentEvents: Int!
  activeGroups: Int!
  ongoingProjects: Int!
}

type PaymentIntentResponse {
  clientSecret: String!
  paymentIntentId: String!
}

type PaymentResult {
  success: Boolean!
  transactionId: String
  receiptUrl: String
  message: String
}

type BulkNotificationResult {
  success: Boolean!
  totalSent: Int!
  failedCount: Int
  message: String
}
